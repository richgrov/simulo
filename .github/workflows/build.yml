name: Build
on: push

jobs:
  #  Build-Windows:
  #    runs-on: windows-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v2
  #        with:
  #          submodules: recursive
  #
  #      - name: Install dependencies
  #        uses: johnwason/vcpkg-action@v6
  #        with:
  #          pkgs: opencv4 vulkan-sdk-components libdeflate
  #          triplet: x64-windows-static
  #          token: ${{ github.token }}
  #          github-binarycache: true
  #
  #      - name: Install onnxruntime
  #        uses: johnwason/vcpkg-action@v6
  #        with:
  #          pkgs: onnxruntime-gpu
  #          triplet: x64-windows
  #          token: ${{ github.token }}
  #          github-binarycache: true
  #
  #      - name: Setup Zig
  #        uses: mlugg/setup-zig@v2
  #
  #      - name: Build project
  #        run: zig build --search-prefix extern/onnxruntime
  #
  #      - name: Upload install artifact
  #        uses: actions/upload-artifact@v4
  #        with:
  #          path: install

  Build-Macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: opencv wasmtime

      - name: Download ONNX Runtime
        run: |
          mkdir -p extern/onnxruntime
          curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-osx-arm64-1.22.0.tgz -o onnxruntime.tgz
          tar -xzf onnxruntime.tgz -C extern/onnxruntime --strip-components=1

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Run tests
        run: zig build test -Doptimize=ReleaseSafe --search-prefix extern/onnxruntime

      - name: Build local
        run: zig build install -Doptimize=ReleaseSafe --search-prefix extern/onnxruntime -p zig-out-local

      - name: Build cloud
        run: zig build install -Doptimize=ReleaseSafe -Dcloud=true --search-prefix extern/onnxruntime -p zig-out-cloud

      - name: Upload local artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-local-macos-arm64
          path: zig-out-local

      - name: Upload cloud artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-cloud-macos-arm64
          path: zig-out-cloud

  Build-Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Add LunarG Repository
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list http://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
          sudo apt update

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: curl libopencv-dev libx11-dev libxkbcommon-dev libxi-dev libwayland-dev wayland-protocols vulkan-sdk build-essential cmake g++-multilib libgcc-11-dev lib32gcc-11-dev liblapack3 ccache
          version: "1.0"

      # Since upgrading to Zig 0.15.1, an error around liblapack.so.3 is thrown. It's unknown why,
      # but cache-apt-packages doesn't properly install it. This is a mechanism to ensure it's
      # configured correctly each time.
      - name: Reconfigure LAPACK
        run: |
          sudo dpkg --configure -a
          sudo apt-get install --reinstall -y liblapack3

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: |
            extern/onnxruntime
            extern/wasmtime
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/build.yml') }}

      - name: Download dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          mkdir -p extern/onnxruntime extern/wasmtime
          curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz -o onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz -C extern/onnxruntime --strip-components=1
          curl -L https://github.com/bytecodealliance/wasmtime/releases/download/v36.0.2/wasmtime-v36.0.2-x86_64-linux-c-api.tar.xz -o wasmtime.tar.xz
          tar -xf wasmtime.tar.xz -C extern/wasmtime --strip-components=1

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1
          use-cache: false

      - name: Run tests
        run: zig build test --search-prefix extern/onnxruntime --search-prefix extern/wasmtime --verbose

      - name: Build local
        run: zig build install --search-prefix extern/onnxruntime --search-prefix extern/wasmtime -p zig-out-local -Doptimize=ReleaseSafe

      - name: Build cloud
        run: zig build install -Dcloud=true --search-prefix extern/onnxruntime --search-prefix extern/wasmtime -p zig-out-cloud -Doptimize=ReleaseSafe

      - name: Upload local artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-local-linux-x64
          path: zig-out-local/bin

      - name: Upload cloud artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-cloud-linux-x64
          path: zig-out-cloud/bin

  Build-Runtime:
    runs-on: ubuntu-latest
    needs: Build-Linux
    steps:
      - name: Download built runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: simulo-runtime-local-linux-x64
          path: .

      # Testing Please Remove
      - name: List simulo runtime binary
        run: |
          pwd
          ls -l
          ls runtime

      - name: Create Debian files
        run: |
          mkdir -p simulo-runtime/DEBIAN
          mkdir -p simulo-runtime/bin

          echo "Package: simulo-runtime" > simulo-runtime/DEBIAN/control
          echo "Version: 1.0.0" >> simulo-runtime/DEBIAN/control
          echo "Section: utils" >> simulo-runtime/DEBIAN/control
          echo "Priority: optional" >> simulo-runtime/DEBIAN/control
          echo "Architecture: amd64" >> simulo-runtime/DEBIAN/control
          echo "Maintainer: Richard Grover <38992201+richgrov@users.noreply.github.com>" >> simulo-runtime/DEBIAN/control
          echo "Description: Simulo runtime" >> simulo-runtime/DEBIAN/control

      - name: Move runtime binary
        run: mv runtime simulo-runtime/bin/

      - name: Build .deb package
        run: dpkg-deb --build --root-owner-group simulo-runtime

      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: runtime-simulo
          path: runtime-simulo/runtime-simulo.deb

      # Testing Please Remove
      - name: List .deb package
        run: ls simulo-runtime

  Headless-Run-Linux:
    runs-on: self-hosted
    needs: Build-Linux
    steps:
      - name: Install headless display tools
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: xvfb imagemagick mesa-vulkan-drivers
          version: "1.0"

      - name: Download built runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: simulo-runtime-local-linux-x64
          path: .

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libopencv-dev liblapack3
          version: "1.0"

      # Included for same reason as in Build-Linux
      - name: Reconfigure LAPACK
        run: |
          sudo dpkg --configure -a
          sudo apt-get install --reinstall -y liblapack3

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: |
            extern/onnxruntime
            extern/wasmtime
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/build.yml') }}

      - name: Download dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          mkdir -p extern/onnxruntime extern/wasmtime
          curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz -o onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz -C extern/onnxruntime --strip-components=1
          curl -L https://github.com/bytecodealliance/wasmtime/releases/download/v36.0.2/wasmtime-v36.0.2-x86_64-linux-c-api.tar.xz -o wasmtime.tar.xz
          tar -xf wasmtime.tar.xz -C extern/wasmtime --strip-components=1
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GITHUB_WORKSPACE/extern/onnxruntime/lib:$GITHUB_WORKSPACE/extern/wasmtime/lib

      - name: Run runtime headless and capture screenshot
        env:
          DISPLAY: :99
        run: |
          #set -euo pipefail
          export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/lvp_icd.x86_64.json
          Xvfb :99 -screen 0 1280x720x24 &
          XVFB_PID=$!
          export DISPLAY=:99
          sleep 1
          chmod +x ./runtime
          ./runtime &
          RUNTIME_PID=$!
          # Ensure runtime is still running after 10 seconds; fail otherwise
          #for i in $(seq 1 10); do
          #  if kill -0 "$RUNTIME_PID" 2>/dev/null; then
          #    sleep 1
          #  else
          #    echo "runtime exited prematurely" >&2
          #    kill "$XVFB_PID" || true
          #    wait "$XVFB_PID" || true
          #    exit 1
          #  fi
          #done
          # Capture screenshot with a single tool (ImageMagick import)
          #import -window root screenshot.png
          # Cleanup
          #kill "$RUNTIME_PID" || true
          #wait "$RUNTIME_PID" || true
          #kill "$XVFB_PID" || true
          #wait "$XVFB_PID" || true

#      - name: Upload screenshot artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: runtime-screenshot-linux
#          path: screenshot.png
