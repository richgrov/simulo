name: Build
on: push

jobs:
  #  Build-Windows:
  #    runs-on: windows-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v2
  #        with:
  #          submodules: recursive
  #
  #      - name: Install dependencies
  #        uses: johnwason/vcpkg-action@v6
  #        with:
  #          pkgs: opencv4 vulkan-sdk-components libdeflate
  #          triplet: x64-windows-static
  #          token: ${{ github.token }}
  #          github-binarycache: true
  #
  #      - name: Install onnxruntime
  #        uses: johnwason/vcpkg-action@v6
  #        with:
  #          pkgs: onnxruntime-gpu
  #          triplet: x64-windows
  #          token: ${{ github.token }}
  #          github-binarycache: true
  #
  #      - name: Setup Zig
  #        uses: mlugg/setup-zig@v2
  #
  #      - name: Build project
  #        run: zig build --search-prefix extern/onnxruntime
  #
  #      - name: Upload install artifact
  #        uses: actions/upload-artifact@v4
  #        with:
  #          path: install

  Build-Macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: tecolicom/actions-use-homebrew-tools@v1
        with:
          tools: opencv wasm-micro-runtime

      - name: Download ONNX Runtime
        run: |
          mkdir -p extern/onnxruntime
          curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-osx-arm64-1.22.0.tgz -o onnxruntime.tgz
          tar -xzf onnxruntime.tgz -C extern/onnxruntime --strip-components=1

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Run tests
        run: zig build test -Doptimize=ReleaseSafe --search-prefix extern/onnxruntime

      - name: Build local
        run: zig build install -Doptimize=ReleaseSafe --search-prefix extern/onnxruntime -p zig-out-local

      - name: Build cloud
        run: zig build install -Doptimize=ReleaseSafe -Dcloud=true --search-prefix extern/onnxruntime -p zig-out-cloud

      - name: Upload local artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-local-macos-arm64
          path: zig-out-local

      - name: Upload cloud artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-cloud-macos-arm64
          path: zig-out-cloud

  Build-Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Add LunarG Repository
        run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list http://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
          sudo apt update

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: curl libopencv-dev libx11-dev libxkbcommon-dev libxi-dev libwayland-dev wayland-protocols vulkan-sdk build-essential cmake g++-multilib libgcc-11-dev lib32gcc-11-dev liblapack3 liblapack-dev ccache
          version: "1.0"

      - name: Download ONNX Runtime
        run: |
          mkdir -p extern/onnxruntime
          curl -L https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-1.22.0.tgz -o onnxruntime-linux-x64-1.22.0.tgz
          tar -xzf onnxruntime-linux-x64-1.22.0.tgz -C extern/onnxruntime --strip-components=1

      - name: Build WAMR
        run: |
          cd ..
          git clone https://github.com/bytecodealliance/wasm-micro-runtime.git
          cd wasm-micro-runtime/product-mini/platforms/linux
          mkdir build
          cd build
          cmake ..
          make
          sudo make install
          cd $GITHUB_WORKSPACE

      - name: Setup Zig
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Run tests
        run: zig build test -Doptimize=ReleaseSafe --search-prefix extern/onnxruntime

      - name: Build local
        run: zig build install -Doptimize=ReleaseSafe --search-prefix extern/onnxruntime -p zig-out-local

      - name: Build cloud
        run: zig build install -Doptimize=ReleaseSafe -Dcloud=true --search-prefix extern/onnxruntime -p zig-out-cloud

      - name: Upload local artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-local-linux-x64
          path: zig-out-local/bin

      - name: Upload cloud artifact
        uses: actions/upload-artifact@v4
        with:
          name: simulo-runtime-cloud-linux-x64
          path: zig-out-cloud/bin

      - name: Run tests
        run: zig build test --search-prefix extern/onnxruntime

  Headless-Run-Linux:
    runs-on: ubuntu-latest
    needs: Build-Linux
    steps:
      - name: Install headless display tools
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: xvfb imagemagick
          version: "1.0"

      - name: Download built runtime artifact
        uses: actions/download-artifact@v4
        with:
          name: simulo-runtime-local-linux-x64
          path: artifact

      - name: Run runtime headless and capture screenshot
        env:
          DISPLAY: :99
          SIMULO_MACHINE_ID: 0
        run: |
          set -euo pipefail
          Xvfb :99 -screen 0 1280x720x24 &
          XVFB_PID=$!
          export DISPLAY=:99
          sleep 1
          cd artifact
          RUNTIME_PATH=$(find . -maxdepth 3 -type f -name runtime -executable | head -n1 || true)
          if [ -z "$RUNTIME_PATH" ]; then
            echo "could not locate runtime binary in downloaded artifact" >&2
            kill "$XVFB_PID" || true
            wait "$XVFB_PID" || true
            exit 1
          fi
          "$RUNTIME_PATH" &
          RUNTIME_PID=$!
          # Ensure runtime is still running after 10 seconds; fail otherwise
          for i in $(seq 1 10); do
            if kill -0 "$RUNTIME_PID" 2>/dev/null; then
              sleep 1
            else
              echo "runtime exited prematurely" >&2
              kill "$XVFB_PID" || true
              wait "$XVFB_PID" || true
              exit 1
            fi
          done
          # Capture screenshot with a single tool (ImageMagick import)
          import -window root screenshot.png
          # Cleanup
          kill "$RUNTIME_PID" || true
          wait "$RUNTIME_PID" || true
          kill "$XVFB_PID" || true
          wait "$XVFB_PID" || true

      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: runtime-screenshot-linux
          path: artifact/screenshot.png
