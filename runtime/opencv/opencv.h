#pragma once

#include <stdbool.h>

#ifdef __cplusplus

#include <opencv2/core.hpp>
typedef cv::Mat CvMat;

extern "C" {
#else

struct CvMat;
typedef struct CvMat CvMat;

#endif

typedef enum {
   Type8UC1 = 0,
   Type8UC3 = 16,
   Type8UC4 = 24,
   Type32FC1 = 5,
   Type32FC3 = 21,
   Type32FC4 = 29,
} CvMatType;

typedef enum {
   StatUnknownException = 2,
   StatStdException = 1,
   StatOk = 0,
   StatBackTrace = -1,
   StatError = -2,
   StatInternal = -3,
   StatNoMem = -4,
   StatBadArg = -5,
   StatBadFunc = -6,
   StatNoConv = -7,
   StatAutoTrace = -8,
   StatHeaderIsNull = -9,
   StatBadImageSize = -10,
   StatBadOffset = -11,
   StatBadDataPtr = -12,
   StatBadStep = -13,
   StatBadModelOrChSeq = -14,
   StatBadNumChannels = -15,
   StatBadNumChannel1U = -16,
   StatBadDepth = -17,
   StatBadAlphaChannel = -18,
   StatBadOrder = -19,
   StatBadOrigin = -20,
   StatBadAlign = -21,
   StatBadCallBack = -22,
   StatBadTileSize = -23,
   StatBadCOI = -24,
   StatBadROISize = -25,
   StatMaskIsTiled = -26,
   StatNullPtr = -27,
   StatVecLengthErr = -28,
   StatFilterStructContentErr = -29,
   StatKernelStructContentErr = -30,
   StatFilterOffsetErr = -31,
   StatBadSize = -201,
   StatDivByZero = -202,
   StatInplaceNotSupported = -203,
   StatObjectNotFound = -204,
   StatUnmatchedFormats = -205,
   StatBadFlag = -206,
   StatBadPoint = -207,
   StatBadMask = -208,
   StatUnmatchedSizes = -209,
   StatUnsupportedFormat = -210,
   StatOutOfRange = -211,
   StatParseError = -212,
   StatNotImplemented = -213,
   StatBadMemBlock = -214,
   StatAssert = -215,
   StatGpuNotSupported = -216,
   StatGpuApiCallError = -217,
   StatOpenGlNotSupported = -218,
   StatOpenGlApiCallError = -219,
   StatOpenCLApiCallError = -220,
   StatOpenCLDoubleNotSupported = -221,
   StatOpenCLInitError = -222,
   StatOpenCLNoAMDBlasFft = -223,
} CvStatus;

typedef enum {
   ReadUnchanged = -1,
   ReadGray = 0,
   ReadBgr = 1,
   ReadColor = 2,
} CvImreadFlags;

typedef enum {
   ConvertBGR2BGRA = 0,
   ConvertRGB2RGBA = ConvertBGR2BGRA,
   ConvertBGRA2BGR = 1,
   ConvertRGBA2RGB = ConvertBGRA2BGR,
   ConvertBGR2RGBA = 2,
   ConvertRGB2BGRA = ConvertBGR2RGBA,
   ConvertRGBA2BGR = 3,
   ConvertBGRA2RGB = ConvertRGBA2BGR,
   ConvertBGR2RGB = 4,
   ConvertRGB2BGR = ConvertBGR2RGB,
   ConvertBGRA2RGBA = 5,
   ConvertRGBA2BGRA = ConvertBGRA2RGBA,
   ConvertBGR2GRAY = 6,
   ConvertRGB2GRAY = 7,
   ConvertGRAY2BGR = 8,
   ConvertGRAY2RGB = ConvertGRAY2BGR,
   ConvertGRAY2BGRA = 9,
   ConvertGRAY2RGBA = ConvertGRAY2BGRA,
   ConvertBGRA2GRAY = 10,
   ConvertRGBA2GRAY = 11,
   ConvertBGR2BGR565 = 12,
   ConvertRGB2BGR565 = 13,
   ConvertBGR5652BGR = 14,
   ConvertBGR5652RGB = 15,
   ConvertBGRA2BGR565 = 16,
   ConvertRGBA2BGR565 = 17,
   ConvertBGR5652BGRA = 18,
   ConvertBGR5652RGBA = 19,
   ConvertGRAY2BGR565 = 20,
   ConvertBGR5652GRAY = 21,
   ConvertBGR2BGR555 = 22,
   ConvertRGB2BGR555 = 23,
   ConvertBGR5552BGR = 24,
   ConvertBGR5552RGB = 25,
   ConvertBGRA2BGR555 = 26,
   ConvertRGBA2BGR555 = 27,
   ConvertBGR5552BGRA = 28,
   ConvertBGR5552RGBA = 29,
   ConvertGRAY2BGR555 = 30,
   ConvertBGR5552GRAY = 31,
   ConvertBGR2XYZ = 32,
   ConvertRGB2XYZ = 33,
   ConvertXYZ2BGR = 34,
   ConvertXYZ2RGB = 35,
   ConvertBGR2YCrCb = 36,
   ConvertRGB2YCrCb = 37,
   ConvertYCrCb2BGR = 38,
   ConvertYCrCb2RGB = 39,
   ConvertBGR2HSV = 40,
   ConvertRGB2HSV = 41,
   ConvertBGR2Lab = 44,
   ConvertRGB2Lab = 45,
   ConvertBGR2Luv = 50,
   ConvertRGB2Luv = 51,
   ConvertBGR2HLS = 52,
   ConvertRGB2HLS = 53,
   ConvertHSV2BGR = 54,
   ConvertHSV2RGB = 55,
   ConvertLab2BGR = 56,
   ConvertLab2RGB = 57,
   ConvertLuv2BGR = 58,
   ConvertLuv2RGB = 59,
   ConvertHLS2BGR = 60,
   ConvertHLS2RGB = 61,
   ConvertBGR2HSV_FULL = 66,
   ConvertRGB2HSV_FULL = 67,
   ConvertBGR2HLS_FULL = 68,
   ConvertRGB2HLS_FULL = 69,
   ConvertHSV2BGR_FULL = 70,
   ConvertHSV2RGB_FULL = 71,
   ConvertHLS2BGR_FULL = 72,
   ConvertHLS2RGB_FULL = 73,
   ConvertLBGR2Lab = 74,
   ConvertLRGB2Lab = 75,
   ConvertLBGR2Luv = 76,
   ConvertLRGB2Luv = 77,
   ConvertLab2LBGR = 78,
   ConvertLab2LRGB = 79,
   ConvertLuv2LBGR = 80,
   ConvertLuv2LRGB = 81,
   ConvertBGR2YUV = 82,
   ConvertRGB2YUV = 83,
   ConvertYUV2BGR = 84,
   ConvertYUV2RGB = 85,
   ConvertYUV2RGB_NV12 = 90,
   ConvertYUV2BGR_NV12 = 91,
   ConvertYUV2RGB_NV21 = 92,
   ConvertYUV2BGR_NV21 = 93,
   ConvertYUV420sp2RGB = ConvertYUV2RGB_NV21,
   ConvertYUV420sp2BGR = ConvertYUV2BGR_NV21,
   ConvertYUV2RGBA_NV12 = 94,
   ConvertYUV2BGRA_NV12 = 95,
   ConvertYUV2RGBA_NV21 = 96,
   ConvertYUV2BGRA_NV21 = 97,
   ConvertYUV420sp2RGBA = ConvertYUV2RGBA_NV21,
   ConvertYUV420sp2BGRA = ConvertYUV2BGRA_NV21,
   ConvertYUV2RGB_YV12 = 98,
   ConvertYUV2BGR_YV12 = 99,
   ConvertYUV2RGB_IYUV = 100,
   ConvertYUV2BGR_IYUV = 101,
   ConvertYUV2RGB_I420 = ConvertYUV2RGB_IYUV,
   ConvertYUV2BGR_I420 = ConvertYUV2BGR_IYUV,
   ConvertYUV420p2RGB = ConvertYUV2RGB_YV12,
   ConvertYUV420p2BGR = ConvertYUV2BGR_YV12,
   ConvertYUV2RGBA_YV12 = 102,
   ConvertYUV2BGRA_YV12 = 103,
   ConvertYUV2RGBA_IYUV = 104,
   ConvertYUV2BGRA_IYUV = 105,
   ConvertYUV2RGBA_I420 = ConvertYUV2RGBA_IYUV,
   ConvertYUV2BGRA_I420 = ConvertYUV2BGRA_IYUV,
   ConvertYUV420p2RGBA = ConvertYUV2RGBA_YV12,
   ConvertYUV420p2BGRA = ConvertYUV2BGRA_YV12,
   ConvertYUV2GRAY_420 = 106,
   ConvertYUV2GRAY_NV21 = ConvertYUV2GRAY_420,
   ConvertYUV2GRAY_NV12 = ConvertYUV2GRAY_420,
   ConvertYUV2GRAY_YV12 = ConvertYUV2GRAY_420,
   ConvertYUV2GRAY_IYUV = ConvertYUV2GRAY_420,
   ConvertYUV2GRAY_I420 = ConvertYUV2GRAY_420,
   ConvertYUV420sp2GRAY = ConvertYUV2GRAY_420,
   ConvertYUV420p2GRAY = ConvertYUV2GRAY_420,
   ConvertYUV2RGB_UYVY = 107,
   ConvertYUV2BGR_UYVY = 108,
   ConvertYUV2RGB_Y422 = ConvertYUV2RGB_UYVY,
   ConvertYUV2BGR_Y422 = ConvertYUV2BGR_UYVY,
   ConvertYUV2RGB_UYNV = ConvertYUV2RGB_UYVY,
   ConvertYUV2BGR_UYNV = ConvertYUV2BGR_UYVY,
   ConvertYUV2RGBA_UYVY = 111,
   ConvertYUV2BGRA_UYVY = 112,
   ConvertYUV2RGBA_Y422 = ConvertYUV2RGBA_UYVY,
   ConvertYUV2BGRA_Y422 = ConvertYUV2BGRA_UYVY,
   ConvertYUV2RGBA_UYNV = ConvertYUV2RGBA_UYVY,
   ConvertYUV2BGRA_UYNV = ConvertYUV2BGRA_UYVY,
   ConvertYUV2RGB_YUY2 = 115,
   ConvertYUV2BGR_YUY2 = 116,
   ConvertYUV2RGB_YVYU = 117,
   ConvertYUV2BGR_YVYU = 118,
   ConvertYUV2RGB_YUYV = ConvertYUV2RGB_YUY2,
   ConvertYUV2BGR_YUYV = ConvertYUV2BGR_YUY2,
   ConvertYUV2RGB_YUNV = ConvertYUV2RGB_YUY2,
   ConvertYUV2BGR_YUNV = ConvertYUV2BGR_YUY2,
   ConvertYUV2RGBA_YUY2 = 119,
   ConvertYUV2BGRA_YUY2 = 120,
   ConvertYUV2RGBA_YVYU = 121,
   ConvertYUV2BGRA_YVYU = 122,
   ConvertYUV2RGBA_YUYV = ConvertYUV2RGBA_YUY2,
   ConvertYUV2BGRA_YUYV = ConvertYUV2BGRA_YUY2,
   ConvertYUV2RGBA_YUNV = ConvertYUV2RGBA_YUY2,
   ConvertYUV2BGRA_YUNV = ConvertYUV2BGRA_YUY2,
   ConvertYUV2GRAY_UYVY = 123,
   ConvertYUV2GRAY_YUY2 = 124,
   ConvertYUV2GRAY_Y422 = ConvertYUV2GRAY_UYVY,
   ConvertYUV2GRAY_UYNV = ConvertYUV2GRAY_UYVY,
   ConvertYUV2GRAY_YVYU = ConvertYUV2GRAY_YUY2,
   ConvertYUV2GRAY_YUYV = ConvertYUV2GRAY_YUY2,
   ConvertYUV2GRAY_YUNV = ConvertYUV2GRAY_YUY2,
   ConvertRGBA2mRGBA = 125,
   ConvertmRGBA2RGBA = 126,
   ConvertRGB2YUV_I420 = 127,
   ConvertBGR2YUV_I420 = 128,
   ConvertRGB2YUV_IYUV = ConvertRGB2YUV_I420,
   ConvertBGR2YUV_IYUV = ConvertBGR2YUV_I420,
   ConvertRGBA2YUV_I420 = 129,
   ConvertBGRA2YUV_I420 = 130,
   ConvertRGBA2YUV_IYUV = ConvertRGBA2YUV_I420,
   ConvertBGRA2YUV_IYUV = ConvertBGRA2YUV_I420,
   ConvertRGB2YUV_YV12 = 131,
   ConvertBGR2YUV_YV12 = 132,
   ConvertRGBA2YUV_YV12 = 133,
   ConvertBGRA2YUV_YV12 = 134,
   ConvertBayerBG2BGR = 46,
   ConvertBayerGB2BGR = 47,
   ConvertBayerRG2BGR = 48,
   ConvertBayerGR2BGR = 49,
   ConvertBayerRGGB2BGR = ConvertBayerBG2BGR,
   ConvertBayerGRBG2BGR = ConvertBayerGB2BGR,
   ConvertBayerBGGR2BGR = ConvertBayerRG2BGR,
   ConvertBayerGBRG2BGR = ConvertBayerGR2BGR,
   ConvertBayerRGGB2RGB = ConvertBayerBGGR2BGR,
   ConvertBayerGRBG2RGB = ConvertBayerGBRG2BGR,
   ConvertBayerBGGR2RGB = ConvertBayerRGGB2BGR,
   ConvertBayerGBRG2RGB = ConvertBayerGRBG2BGR,
   ConvertBayerBG2RGB = ConvertBayerRG2BGR,
   ConvertBayerGB2RGB = ConvertBayerGR2BGR,
   ConvertBayerRG2RGB = ConvertBayerBG2BGR,
   ConvertBayerGR2RGB = ConvertBayerGB2BGR,
   ConvertBayerBG2GRAY = 86,
   ConvertBayerGB2GRAY = 87,
   ConvertBayerRG2GRAY = 88,
   ConvertBayerGR2GRAY = 89,
   ConvertBayerRGGB2GRAY = ConvertBayerBG2GRAY,
   ConvertBayerGRBG2GRAY = ConvertBayerGB2GRAY,
   ConvertBayerBGGR2GRAY = ConvertBayerRG2GRAY,
   ConvertBayerGBRG2GRAY = ConvertBayerGR2GRAY,
   ConvertBayerBG2BGR_VNG = 62,
   ConvertBayerGB2BGR_VNG = 63,
   ConvertBayerRG2BGR_VNG = 64,
   ConvertBayerGR2BGR_VNG = 65,
   ConvertBayerRGGB2BGR_VNG = ConvertBayerBG2BGR_VNG,
   ConvertBayerGRBG2BGR_VNG = ConvertBayerGB2BGR_VNG,
   ConvertBayerBGGR2BGR_VNG = ConvertBayerRG2BGR_VNG,
   ConvertBayerGBRG2BGR_VNG = ConvertBayerGR2BGR_VNG,
   ConvertBayerRGGB2RGB_VNG = ConvertBayerBGGR2BGR_VNG,
   ConvertBayerGRBG2RGB_VNG = ConvertBayerGBRG2BGR_VNG,
   ConvertBayerBGGR2RGB_VNG = ConvertBayerRGGB2BGR_VNG,
   ConvertBayerGBRG2RGB_VNG = ConvertBayerGRBG2BGR_VNG,
   ConvertBayerBG2RGB_VNG = ConvertBayerRG2BGR_VNG,
   ConvertBayerGB2RGB_VNG = ConvertBayerGR2BGR_VNG,
   ConvertBayerRG2RGB_VNG = ConvertBayerBG2BGR_VNG,
   ConvertBayerGR2RGB_VNG = ConvertBayerGB2BGR_VNG,
   ConvertBayerBG2BGR_EA = 135,
   ConvertBayerGB2BGR_EA = 136,
   ConvertBayerRG2BGR_EA = 137,
   ConvertBayerGR2BGR_EA = 138,
   ConvertBayerRGGB2BGR_EA = ConvertBayerBG2BGR_EA,
   ConvertBayerGRBG2BGR_EA = ConvertBayerGB2BGR_EA,
   ConvertBayerBGGR2BGR_EA = ConvertBayerRG2BGR_EA,
   ConvertBayerGBRG2BGR_EA = ConvertBayerGR2BGR_EA,
   ConvertBayerRGGB2RGB_EA = ConvertBayerBGGR2BGR_EA,
   ConvertBayerGRBG2RGB_EA = ConvertBayerGBRG2BGR_EA,
   ConvertBayerBGGR2RGB_EA = ConvertBayerRGGB2BGR_EA,
   ConvertBayerGBRG2RGB_EA = ConvertBayerGRBG2BGR_EA,
   ConvertBayerBG2RGB_EA = ConvertBayerRG2BGR_EA,
   ConvertBayerGB2RGB_EA = ConvertBayerGR2BGR_EA,
   ConvertBayerRG2RGB_EA = ConvertBayerBG2BGR_EA,
   ConvertBayerGR2RGB_EA = ConvertBayerGB2BGR_EA,
   ConvertBayerBG2BGRA = 139,
   ConvertBayerGB2BGRA = 140,
   ConvertBayerRG2BGRA = 141,
   ConvertBayerGR2BGRA = 142,
   ConvertBayerRGGB2BGRA = ConvertBayerBG2BGRA,
   ConvertBayerGRBG2BGRA = ConvertBayerGB2BGRA,
   ConvertBayerBGGR2BGRA = ConvertBayerRG2BGRA,
   ConvertBayerGBRG2BGRA = ConvertBayerGR2BGRA,
   ConvertBayerRGGB2RGBA = ConvertBayerBGGR2BGRA,
   ConvertBayerGRBG2RGBA = ConvertBayerGBRG2BGRA,
   ConvertBayerBGGR2RGBA = ConvertBayerRGGB2BGRA,
   ConvertBayerGBRG2RGBA = ConvertBayerGRBG2BGRA,
   ConvertBayerBG2RGBA = ConvertBayerRG2BGRA,
   ConvertBayerGB2RGBA = ConvertBayerGR2BGRA,
   ConvertBayerRG2RGBA = ConvertBayerBG2BGRA,
   ConvertBayerGR2RGBA = ConvertBayerGB2BGRA,
   ConvertRGB2YUV_UYVY = 143,
   ConvertBGR2YUV_UYVY = 144,
   ConvertRGB2YUV_Y422 = ConvertRGB2YUV_UYVY,
   ConvertBGR2YUV_Y422 = ConvertBGR2YUV_UYVY,
   ConvertRGB2YUV_UYNV = ConvertRGB2YUV_UYVY,
   ConvertBGR2YUV_UYNV = ConvertBGR2YUV_UYVY,
   ConvertRGBA2YUV_UYVY = 145,
   ConvertBGRA2YUV_UYVY = 146,
   ConvertRGBA2YUV_Y422 = ConvertRGBA2YUV_UYVY,
   ConvertBGRA2YUV_Y422 = ConvertBGRA2YUV_UYVY,
   ConvertRGBA2YUV_UYNV = ConvertRGBA2YUV_UYVY,
   ConvertBGRA2YUV_UYNV = ConvertBGRA2YUV_UYVY,
   ConvertRGB2YUV_YUY2 = 147,
   ConvertBGR2YUV_YUY2 = 148,
   ConvertRGB2YUV_YVYU = 149,
   ConvertBGR2YUV_YVYU = 150,
   ConvertRGB2YUV_YUYV = ConvertRGB2YUV_YUY2,
   ConvertBGR2YUV_YUYV = ConvertBGR2YUV_YUY2,
   ConvertRGB2YUV_YUNV = ConvertRGB2YUV_YUY2,
   ConvertBGR2YUV_YUNV = ConvertBGR2YUV_YUY2,
   ConvertRGBA2YUV_YUY2 = 151,
   ConvertBGRA2YUV_YUY2 = 152,
   ConvertRGBA2YUV_YVYU = 153,
   ConvertBGRA2YUV_YVYU = 154,
   ConvertRGBA2YUV_YUYV = ConvertRGBA2YUV_YUY2,
   ConvertBGRA2YUV_YUYV = ConvertBGRA2YUV_YUY2,
   ConvertRGBA2YUV_YUNV = ConvertRGBA2YUV_YUY2,
   ConvertBGRA2YUV_YUNV = ConvertBGRA2YUV_YUY2,
   ConvertMax = 155
} CvConvert;

typedef enum {
   CalibCbAdaptiveThreshold = 1,
   CalibCbNormalizeImage = 2,
   CalibCbFilterQuads = 4,
   CalibCbFastCheck = 8,
   CalibCbExhaustive = 16,
   CalibCbAccuracy = 32,
   CalibCbLarger = 64,
   CalibCbMarker = 128,
   CalibCbPlain = 256
} CvCalibChessboardFlags;

CvStatus mat_init(CvMat **out, int rows, int cols, CvMatType type);
CvStatus mat_release(CvMat *mat);

CvStatus mat_convert(CvMat *out, const CvMat *in, CvConvert convert);
CvStatus mat_wrap(CvMat **out, void *data, int rows, int cols, CvMatType type);
CvStatus mat_copy(CvMat *out, const CvMat *in);
CvStatus mat_sub(CvMat *out, CvMat *in1, CvMat *in2);

CvStatus mat_decode(CvMat *dst, const unsigned char *data, int data_len, CvImreadFlags flags);
CvStatus mat_write(CvMat *mat, const char *path);

CvStatus mat_flip(CvMat *out, const CvMat *in, int flip_code);

CvStatus mat_convert_to(CvMat *out, const CvMat *in, CvMatType type, double alpha, double beta);

CvStatus mat_extract_channel(CvMat *out, const CvMat *in, int channel_index);

int mat_is_empty(const CvMat *m);
int mat_rows(const CvMat *m);
int mat_cols(const CvMat *m);
int mat_channels(const CvMat *m);
unsigned long long mat_total(const CvMat *m);
unsigned char *mat_data(CvMat *m);

CvStatus find_chessboard_transform(
    const CvMat *rgb, int pattern_width, int pattern_height, CvCalibChessboardFlags flags,
    double *out3x3, bool *out_found
);

#ifdef __cplusplus
}
#endif